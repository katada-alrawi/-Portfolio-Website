{"ast":null,"code":"import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n\nconst findHTMLForm = form => {\n  return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\n\n\nexport const sendForm = (serviceID, templateID, form, options) => {\n  const opts = buildOptions(options);\n  const publicKey = opts.publicKey || store.publicKey;\n  const blockHeadless = opts.blockHeadless || store.blockHeadless;\n  const blockList = { ...store.blockList,\n    ...opts.blockList\n  };\n  const limitRate = { ...store.limitRate,\n    ...opts.limitRate\n  };\n\n  if (blockHeadless && isHeadless(navigator)) {\n    return Promise.reject(headlessError());\n  }\n\n  const currentForm = findHTMLForm(form);\n  validateParams(publicKey, serviceID, templateID);\n  validateForm(currentForm);\n  const formData = new FormData(currentForm);\n\n  if (isBlockedValueInParams(blockList, formData)) {\n    return Promise.reject(blockedEmailError());\n  }\n\n  if (isLimitRateHit(localStorage, location.pathname, limitRate)) {\n    return Promise.reject(limitRateError());\n  }\n\n  formData.append('lib_version', '4.1.0');\n  formData.append('service_id', serviceID);\n  formData.append('template_id', templateID);\n  formData.append('user_id', publicKey);\n  return sendPost('/api/v1.0/email/send-form', formData);\n};","map":{"version":3,"sources":["/home/dci-student/Desktop/-Portfolio-Website/node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js"],"names":["store","sendPost","buildOptions","validateForm","validateParams","isHeadless","headlessError","isBlockedValueInParams","blockedEmailError","isLimitRateHit","limitRateError","findHTMLForm","form","document","querySelector","sendForm","serviceID","templateID","options","opts","publicKey","blockHeadless","blockList","limitRate","navigator","Promise","reject","currentForm","formData","FormData","localStorage","location","pathname","append"],"mappings":"AAAA,SAASA,KAAT,QAAsB,mBAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,aAAT,QAA8B,0CAA9B;AACA,SAASC,sBAAT,QAAuC,2DAAvC;AACA,SAASC,iBAAT,QAAkC,kDAAlC;AACA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,cAAT,QAA+B,4CAA/B;;AACA,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAC3B,SAAO,OAAOA,IAAP,KAAgB,QAAhB,GAA2BC,QAAQ,CAACC,aAAT,CAAuBF,IAAvB,CAA3B,GAA0DA,IAAjE;AACH,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMG,QAAQ,GAAG,CAACC,SAAD,EAAYC,UAAZ,EAAwBL,IAAxB,EAA8BM,OAA9B,KAA0C;AAC9D,QAAMC,IAAI,GAAGjB,YAAY,CAACgB,OAAD,CAAzB;AACA,QAAME,SAAS,GAAGD,IAAI,CAACC,SAAL,IAAkBpB,KAAK,CAACoB,SAA1C;AACA,QAAMC,aAAa,GAAGF,IAAI,CAACE,aAAL,IAAsBrB,KAAK,CAACqB,aAAlD;AACA,QAAMC,SAAS,GAAG,EAAE,GAAGtB,KAAK,CAACsB,SAAX;AAAsB,OAAGH,IAAI,CAACG;AAA9B,GAAlB;AACA,QAAMC,SAAS,GAAG,EAAE,GAAGvB,KAAK,CAACuB,SAAX;AAAsB,OAAGJ,IAAI,CAACI;AAA9B,GAAlB;;AACA,MAAIF,aAAa,IAAIhB,UAAU,CAACmB,SAAD,CAA/B,EAA4C;AACxC,WAAOC,OAAO,CAACC,MAAR,CAAepB,aAAa,EAA5B,CAAP;AACH;;AACD,QAAMqB,WAAW,GAAGhB,YAAY,CAACC,IAAD,CAAhC;AACAR,EAAAA,cAAc,CAACgB,SAAD,EAAYJ,SAAZ,EAAuBC,UAAvB,CAAd;AACAd,EAAAA,YAAY,CAACwB,WAAD,CAAZ;AACA,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAaF,WAAb,CAAjB;;AACA,MAAIpB,sBAAsB,CAACe,SAAD,EAAYM,QAAZ,CAA1B,EAAiD;AAC7C,WAAOH,OAAO,CAACC,MAAR,CAAelB,iBAAiB,EAAhC,CAAP;AACH;;AACD,MAAIC,cAAc,CAACqB,YAAD,EAAeC,QAAQ,CAACC,QAAxB,EAAkCT,SAAlC,CAAlB,EAAgE;AAC5D,WAAOE,OAAO,CAACC,MAAR,CAAehB,cAAc,EAA7B,CAAP;AACH;;AACDkB,EAAAA,QAAQ,CAACK,MAAT,CAAgB,aAAhB,EAA+B,OAA/B;AACAL,EAAAA,QAAQ,CAACK,MAAT,CAAgB,YAAhB,EAA8BjB,SAA9B;AACAY,EAAAA,QAAQ,CAACK,MAAT,CAAgB,aAAhB,EAA+BhB,UAA/B;AACAW,EAAAA,QAAQ,CAACK,MAAT,CAAgB,SAAhB,EAA2Bb,SAA3B;AACA,SAAOnB,QAAQ,CAAC,2BAAD,EAA8B2B,QAA9B,CAAf;AACH,CAxBM","sourcesContent":["import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (isLimitRateHit(localStorage, location.pathname, limitRate)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.1.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n"]},"metadata":{},"sourceType":"module"}