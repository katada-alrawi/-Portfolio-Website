{"ast":null,"code":"import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\n\nexport const send = (serviceID, templateID, templateParams, options) => {\n  const opts = buildOptions(options);\n  const publicKey = opts.publicKey || store.publicKey;\n  const blockHeadless = opts.blockHeadless || store.blockHeadless;\n  const blockList = { ...store.blockList,\n    ...opts.blockList\n  };\n  const limitRate = { ...store.limitRate,\n    ...opts.limitRate\n  };\n\n  if (blockHeadless && isHeadless(navigator)) {\n    return Promise.reject(headlessError());\n  }\n\n  validateParams(publicKey, serviceID, templateID);\n  validateTemplateParams(templateParams);\n\n  if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n    return Promise.reject(blockedEmailError());\n  }\n\n  if (isLimitRateHit(localStorage, location.pathname, limitRate)) {\n    return Promise.reject(limitRateError());\n  }\n\n  const params = {\n    lib_version: '4.1.0',\n    user_id: publicKey,\n    service_id: serviceID,\n    template_id: templateID,\n    template_params: templateParams\n  };\n  return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n    'Content-type': 'application/json'\n  });\n};","map":{"version":3,"sources":["/home/dci-student/Desktop/-Portfolio-Website/node_modules/@emailjs/browser/es/methods/send/send.js"],"names":["store","sendPost","buildOptions","validateParams","validateTemplateParams","isHeadless","headlessError","isBlockedValueInParams","blockedEmailError","isLimitRateHit","limitRateError","send","serviceID","templateID","templateParams","options","opts","publicKey","blockHeadless","blockList","limitRate","navigator","Promise","reject","localStorage","location","pathname","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify"],"mappings":"AAAA,SAASA,KAAT,QAAsB,mBAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,sBAAT,QAAuC,2DAAvC;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,aAAT,QAA8B,0CAA9B;AACA,SAASC,sBAAT,QAAuC,2DAAvC;AACA,SAASC,iBAAT,QAAkC,kDAAlC;AACA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG,CAACC,SAAD,EAAYC,UAAZ,EAAwBC,cAAxB,EAAwCC,OAAxC,KAAoD;AACpE,QAAMC,IAAI,GAAGd,YAAY,CAACa,OAAD,CAAzB;AACA,QAAME,SAAS,GAAGD,IAAI,CAACC,SAAL,IAAkBjB,KAAK,CAACiB,SAA1C;AACA,QAAMC,aAAa,GAAGF,IAAI,CAACE,aAAL,IAAsBlB,KAAK,CAACkB,aAAlD;AACA,QAAMC,SAAS,GAAG,EAAE,GAAGnB,KAAK,CAACmB,SAAX;AAAsB,OAAGH,IAAI,CAACG;AAA9B,GAAlB;AACA,QAAMC,SAAS,GAAG,EAAE,GAAGpB,KAAK,CAACoB,SAAX;AAAsB,OAAGJ,IAAI,CAACI;AAA9B,GAAlB;;AACA,MAAIF,aAAa,IAAIb,UAAU,CAACgB,SAAD,CAA/B,EAA4C;AACxC,WAAOC,OAAO,CAACC,MAAR,CAAejB,aAAa,EAA5B,CAAP;AACH;;AACDH,EAAAA,cAAc,CAACc,SAAD,EAAYL,SAAZ,EAAuBC,UAAvB,CAAd;AACAT,EAAAA,sBAAsB,CAACU,cAAD,CAAtB;;AACA,MAAIA,cAAc,IAAIP,sBAAsB,CAACY,SAAD,EAAYL,cAAZ,CAA5C,EAAyE;AACrE,WAAOQ,OAAO,CAACC,MAAR,CAAef,iBAAiB,EAAhC,CAAP;AACH;;AACD,MAAIC,cAAc,CAACe,YAAD,EAAeC,QAAQ,CAACC,QAAxB,EAAkCN,SAAlC,CAAlB,EAAgE;AAC5D,WAAOE,OAAO,CAACC,MAAR,CAAeb,cAAc,EAA7B,CAAP;AACH;;AACD,QAAMiB,MAAM,GAAG;AACXC,IAAAA,WAAW,EAAE,OADF;AAEXC,IAAAA,OAAO,EAAEZ,SAFE;AAGXa,IAAAA,UAAU,EAAElB,SAHD;AAIXmB,IAAAA,WAAW,EAAElB,UAJF;AAKXmB,IAAAA,eAAe,EAAElB;AALN,GAAf;AAOA,SAAOb,QAAQ,CAAC,sBAAD,EAAyBgC,IAAI,CAACC,SAAL,CAAeP,MAAf,CAAzB,EAAiD;AAC5D,oBAAgB;AAD4C,GAAjD,CAAf;AAGH,CA3BM","sourcesContent":["import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (isLimitRateHit(localStorage, location.pathname, limitRate)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.1.0',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}